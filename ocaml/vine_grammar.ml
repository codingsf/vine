type token =
  | ID of (string)
  | INT of (Int64.t)
  | STRING of (string)
  | COMMENT of (string)
  | TYP of (Vine.typ)
  | LPAREN
  | RPAREN
  | SEMI
  | EOF
  | LCURLY
  | RCURLY
  | COLON
  | LSQUARE
  | RSQUARE
  | COMMA
  | CJMP
  | NAME
  | JMP
  | CAST
  | INIT
  | VAR
  | LET
  | IN
  | TRUE
  | FALSE
  | LABEL
  | ATTR
  | CALL
  | ASSERT
  | HALT
  | SPECIAL
  | UNKNOWN
  | STATE
  | TVOID
  | RETURN
  | EXTERN
  | PLUS
  | MINUS
  | DIVIDE
  | MOD
  | SMOD
  | TIMES
  | SDIVIDE
  | LSHIFT
  | RSHIFT
  | ARSHIFT
  | XOR
  | NEQ
  | SLT
  | SLE
  | AND
  | OR
  | EQUAL
  | LT
  | LE
  | NOT
  | ASSIGN
  | GT
  | GE
  | SGT
  | SGE

open Parsing;;
# 2 "vine_grammar.mly"
(*
Vine is Copyright (C) 2006-2009, BitBlaze Team.

You can redistribute and modify it under the terms of the GNU GPL,
version 2 or later, but it is made available WITHOUT ANY WARRANTY.
See the top-level README file for more details.

For more information about Vine and other BitBlaze software, see our
web site at: http://bitblaze.cs.berkeley.edu/
*)
# 15 "vine_grammar.mly"
(* IR Grammer file *)
(* 

   Lacks support for: 
      - Comment : We could have the lexer return any comment
                  strings, or have a Comment("foo") recognizer. It's
   not clear how to add comments to the grammar, though.  
*)

 open Vine_absyn;;
 open Vine;;

  (* utility function for creating position information *)
  let line_ctxt l r:abspos = (rhs_start l, rhs_end r);; 

  let scope = getscope ()




# 98 "vine_grammar.ml"
let yytransl_const = [|
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* SEMI *);
    0 (* EOF *);
  265 (* LCURLY *);
  266 (* RCURLY *);
  267 (* COLON *);
  268 (* LSQUARE *);
  269 (* RSQUARE *);
  270 (* COMMA *);
  271 (* CJMP *);
  272 (* NAME *);
  273 (* JMP *);
  274 (* CAST *);
  275 (* INIT *);
  276 (* VAR *);
  277 (* LET *);
  278 (* IN *);
  279 (* TRUE *);
  280 (* FALSE *);
  281 (* LABEL *);
  282 (* ATTR *);
  283 (* CALL *);
  284 (* ASSERT *);
  285 (* HALT *);
  286 (* SPECIAL *);
  287 (* UNKNOWN *);
  288 (* STATE *);
  289 (* TVOID *);
  290 (* RETURN *);
  291 (* EXTERN *);
  292 (* PLUS *);
  293 (* MINUS *);
  294 (* DIVIDE *);
  295 (* MOD *);
  296 (* SMOD *);
  297 (* TIMES *);
  298 (* SDIVIDE *);
  299 (* LSHIFT *);
  300 (* RSHIFT *);
  301 (* ARSHIFT *);
  302 (* XOR *);
  303 (* NEQ *);
  304 (* SLT *);
  305 (* SLE *);
  306 (* AND *);
  307 (* OR *);
  308 (* EQUAL *);
  309 (* LT *);
  310 (* LE *);
  311 (* NOT *);
  312 (* ASSIGN *);
  313 (* GT *);
  314 (* GE *);
  315 (* SGT *);
  316 (* SGE *);
    0|]

let yytransl_block = [|
  257 (* ID *);
  258 (* INT *);
  259 (* STRING *);
  260 (* COMMENT *);
  261 (* TYP *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\004\000\004\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\006\000\006\000\007\000\
\008\000\009\000\009\000\009\000\009\000\009\000\009\000\013\000\
\013\000\015\000\015\000\014\000\014\000\017\000\017\000\018\000\
\018\000\010\000\020\000\020\000\019\000\019\000\022\000\022\000\
\021\000\021\000\024\000\024\000\025\000\011\000\026\000\027\000\
\027\000\028\000\012\000\023\000\023\000\023\000\029\000\030\000\
\030\000\031\000\031\000\016\000\033\000\033\000\032\000\032\000\
\034\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\035\000\035\000\035\000\035\000\000\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\000\000\002\000\002\000\001\000\001\000\
\002\000\001\000\001\000\001\000\001\000\004\000\008\000\004\000\
\003\000\001\000\001\000\002\000\002\000\002\000\001\000\003\000\
\003\000\005\000\004\000\000\000\001\000\000\000\001\000\001\000\
\003\000\007\000\001\000\001\000\000\000\001\000\001\000\001\000\
\001\000\000\000\003\000\001\000\003\000\005\000\001\000\001\000\
\003\000\001\000\003\000\002\000\004\000\004\000\001\000\000\000\
\004\000\001\000\003\000\003\000\000\000\002\000\000\000\003\000\
\006\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\001\000\002\000\004\000\001\000\003\000\
\007\000\001\000\001\000\003\000\001\000\002\000\002\000"

let yydefred = "\000\000\
\004\000\000\000\000\000\102\000\000\000\000\000\000\000\000\000\
\101\000\000\000\000\000\000\000\000\000\098\000\099\000\000\000\
\000\000\000\000\000\000\095\000\000\000\092\000\001\000\000\000\
\008\000\013\000\050\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\038\000\000\000\003\000\000\000\
\000\000\007\000\000\000\010\000\011\000\012\000\018\000\023\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\093\000\091\000\090\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\020\000\005\000\006\000\009\000\000\000\055\000\035\000\
\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\000\
\066\000\000\000\000\000\000\000\000\000\000\000\070\000\072\000\
\073\000\069\000\071\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\017\000\000\000\000\000\000\000\025\000\
\000\000\000\000\000\000\052\000\051\000\064\000\000\000\094\000\
\000\000\000\000\027\000\000\000\000\000\014\000\000\000\049\000\
\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\046\000\026\000\000\000\000\000\000\000\044\000\
\054\000\053\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\057\000\000\000\000\000\000\000\039\000\
\040\000\034\000\043\000\059\000\015\000"

let yydgoto = "\003\000\
\004\000\141\000\005\000\006\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\098\000\048\000\020\000\
\142\000\143\000\050\000\105\000\182\000\202\000\106\000\183\000\
\184\000\090\000\091\000\051\000\107\000\156\000\188\000\053\000\
\111\000\021\000\022\000"

let yysindex = "\041\000\
\000\000\009\255\000\000\000\000\006\000\118\255\252\254\005\255\
\000\000\009\255\023\255\048\255\017\255\000\000\000\000\054\255\
\009\255\009\255\034\005\000\000\037\255\000\000\000\000\016\255\
\000\000\000\000\000\000\083\255\094\255\062\255\100\255\009\255\
\009\255\009\255\097\255\009\255\000\000\034\005\000\000\096\255\
\098\255\000\000\099\255\000\000\000\000\000\000\000\000\000\000\
\052\255\254\254\000\000\009\255\101\255\104\255\221\003\109\255\
\009\255\252\254\000\000\000\000\000\000\009\255\009\255\009\255\
\009\255\009\255\009\255\009\255\009\255\009\255\009\255\009\255\
\009\255\009\255\009\255\009\255\009\255\009\255\009\255\009\255\
\009\255\009\255\009\255\009\255\009\255\009\255\009\255\009\255\
\000\000\102\255\103\255\105\255\159\255\034\005\034\005\111\255\
\034\005\000\000\000\000\000\000\000\000\222\255\000\000\000\000\
\114\255\106\255\124\255\113\255\183\004\104\255\000\000\106\255\
\000\000\121\255\246\003\101\255\057\255\057\255\000\000\000\000\
\000\000\000\000\000\000\011\255\011\255\011\255\059\005\084\005\
\144\255\144\255\059\005\059\005\084\005\144\255\144\255\144\255\
\144\255\144\255\144\255\034\005\034\005\122\255\116\255\224\004\
\038\004\104\255\130\255\000\000\009\255\125\255\034\005\000\000\
\119\255\039\255\138\255\000\000\000\000\000\000\106\255\000\000\
\150\255\107\255\000\000\009\255\009\255\000\000\026\255\000\000\
\147\255\000\000\155\255\145\255\049\255\156\255\148\255\009\255\
\034\005\009\005\000\000\000\000\149\255\154\255\157\255\000\000\
\000\000\000\000\158\255\162\255\104\255\034\005\009\255\104\255\
\084\255\155\255\156\255\000\000\106\255\063\004\106\255\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\023\000\056\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\162\000\000\000\000\000\000\000\000\000\116\004\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\166\255\000\000\167\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\141\004\000\000\000\000\000\000\111\000\000\000\000\000\000\000\
\000\000\245\254\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\163\255\000\000\000\000\
\000\000\000\000\153\255\000\000\000\000\168\255\169\255\000\000\
\170\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\189\255\001\000\000\000\000\000\000\000\000\000\221\000\
\000\000\000\000\000\000\135\255\075\001\130\001\000\000\000\000\
\000\000\000\000\000\000\185\001\240\001\039\002\149\003\128\003\
\094\002\113\002\195\003\205\003\138\003\168\002\185\002\240\002\
\001\003\056\003\073\003\004\000\000\255\000\000\185\255\000\000\
\000\000\000\000\000\000\000\000\163\255\000\000\206\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\166\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\186\255\000\000\000\000\000\000\000\000\000\000\
\010\255\000\000\000\000\000\000\000\000\000\000\208\255\000\000\
\000\000\000\000\213\255\000\000\000\000\200\255\000\000\000\000\
\000\000\000\000\000\000\000\000\020\001\000\000\012\255\000\000\
\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\003\000\175\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\127\000\224\000\
\082\000\000\000\000\000\000\000\000\000\000\000\204\255\000\000\
\038\000\000\000\000\000\000\000\000\000\000\000\039\000\177\000\
\117\000\000\000\000\000"

let yytablesize = 1680
let yytable = "\063\000\
\056\000\112\000\103\000\096\000\019\000\023\000\032\000\052\000\
\038\000\007\000\008\000\009\000\055\000\032\000\010\000\054\000\
\033\000\058\000\045\000\060\000\061\000\086\000\002\000\033\000\
\011\000\045\000\012\000\052\000\056\000\013\000\104\000\014\000\
\015\000\179\000\093\000\094\000\095\000\154\000\097\000\016\000\
\172\000\001\000\002\000\103\000\063\000\017\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\057\000\109\000\063\000\
\059\000\159\000\085\000\115\000\154\000\186\000\089\000\018\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\087\000\144\000\145\000\200\000\027\000\167\000\064\000\065\000\
\066\000\067\000\068\000\088\000\092\000\173\000\096\000\099\000\
\151\000\100\000\101\000\102\000\103\000\114\000\061\000\110\000\
\146\000\150\000\153\000\148\000\147\000\154\000\024\000\008\000\
\009\000\025\000\157\000\010\000\171\000\026\000\027\000\160\000\
\163\000\164\000\168\000\170\000\028\000\011\000\029\000\012\000\
\197\000\030\000\013\000\199\000\014\000\015\000\031\000\174\000\
\032\000\033\000\034\000\035\000\016\000\155\000\175\000\036\000\
\037\000\180\000\017\000\181\000\187\000\185\000\189\000\192\000\
\193\000\103\000\176\000\047\000\149\000\062\000\177\000\178\000\
\196\000\030\000\194\000\195\000\018\000\028\000\019\000\022\000\
\021\000\029\000\190\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\036\000\061\000\031\000\
\042\000\198\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\024\000\041\000\081\000\
\082\000\083\000\084\000\058\000\100\000\065\000\024\000\008\000\
\009\000\108\000\201\000\010\000\152\000\049\000\169\000\203\000\
\162\000\204\000\116\000\000\000\000\000\011\000\000\000\012\000\
\000\000\000\000\013\000\000\000\014\000\015\000\000\000\000\000\
\032\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\
\000\000\056\000\017\000\000\000\000\000\000\000\056\000\056\000\
\056\000\096\000\096\000\096\000\056\000\056\000\056\000\000\000\
\096\000\096\000\000\000\097\000\018\000\000\000\056\000\000\000\
\000\000\096\000\000\000\037\000\000\000\000\000\000\000\000\000\
\002\000\000\000\000\000\000\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
\056\000\056\000\056\000\056\000\056\000\056\000\056\000\037\000\
\056\000\056\000\056\000\056\000\056\000\063\000\063\000\063\000\
\000\000\000\000\063\000\000\000\063\000\063\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\063\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\000\000\000\000\
\063\000\063\000\063\000\063\000\061\000\061\000\061\000\000\000\
\000\000\000\000\000\000\061\000\061\000\000\000\000\000\000\000\
\000\000\068\000\000\000\000\000\061\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
\061\000\061\000\061\000\061\000\061\000\000\000\061\000\061\000\
\061\000\061\000\061\000\062\000\062\000\062\000\000\000\000\000\
\000\000\000\000\062\000\062\000\000\000\000\000\000\000\000\000\
\074\000\000\000\000\000\062\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\062\000\062\000\000\000\062\000\062\000\062\000\
\062\000\062\000\100\000\100\000\100\000\000\000\000\000\000\000\
\000\000\100\000\100\000\000\000\000\000\000\000\000\000\075\000\
\000\000\000\000\100\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\100\000\100\000\100\000\100\000\100\000\
\100\000\100\000\100\000\000\000\000\000\100\000\100\000\100\000\
\100\000\097\000\097\000\097\000\000\000\000\000\000\000\000\000\
\097\000\097\000\000\000\000\000\000\000\000\000\076\000\000\000\
\000\000\097\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\097\000\097\000\097\000\097\000\097\000\097\000\
\097\000\097\000\000\000\000\000\097\000\097\000\097\000\097\000\
\067\000\067\000\067\000\000\000\000\000\000\000\000\000\067\000\
\067\000\000\000\000\000\000\000\000\000\084\000\000\000\000\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\067\000\067\000\
\085\000\000\000\000\000\000\000\000\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\067\000\000\000\000\000\067\000\067\000\067\000\067\000\068\000\
\068\000\068\000\000\000\000\000\000\000\000\000\068\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\068\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\068\000\068\000\082\000\
\000\000\000\000\000\000\000\000\068\000\068\000\068\000\068\000\
\068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
\083\000\000\000\068\000\068\000\068\000\068\000\074\000\074\000\
\074\000\000\000\000\000\000\000\000\000\074\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\074\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\074\000\074\000\074\000\074\000\074\000\
\074\000\074\000\074\000\074\000\074\000\074\000\074\000\086\000\
\000\000\074\000\074\000\074\000\074\000\075\000\075\000\075\000\
\000\000\000\000\000\000\000\000\075\000\075\000\000\000\000\000\
\087\000\000\000\000\000\000\000\000\000\075\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\075\000\075\000\075\000\075\000\075\000\075\000\
\075\000\075\000\075\000\075\000\075\000\075\000\000\000\000\000\
\075\000\075\000\075\000\075\000\076\000\076\000\076\000\000\000\
\000\000\000\000\000\000\076\000\076\000\000\000\000\000\088\000\
\000\000\000\000\000\000\000\000\076\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
\076\000\076\000\076\000\076\000\076\000\000\000\000\000\076\000\
\076\000\076\000\076\000\084\000\084\000\084\000\000\000\000\000\
\000\000\000\000\084\000\084\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\084\000\000\000\000\000\085\000\085\000\
\085\000\000\000\000\000\000\000\000\000\085\000\085\000\081\000\
\000\000\000\000\000\000\000\000\000\000\000\000\085\000\000\000\
\000\000\080\000\000\000\084\000\084\000\084\000\084\000\084\000\
\084\000\084\000\084\000\084\000\079\000\000\000\084\000\084\000\
\084\000\084\000\000\000\000\000\000\000\000\000\085\000\085\000\
\085\000\085\000\085\000\085\000\085\000\085\000\085\000\000\000\
\000\000\085\000\085\000\085\000\085\000\082\000\082\000\082\000\
\000\000\000\000\000\000\000\000\082\000\082\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\083\000\083\000\
\083\000\000\000\077\000\000\000\000\000\083\000\083\000\000\000\
\000\000\000\000\000\000\000\000\078\000\000\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\082\000\082\000\082\000\
\082\000\082\000\082\000\082\000\082\000\082\000\000\000\000\000\
\082\000\082\000\082\000\082\000\000\000\000\000\083\000\083\000\
\083\000\083\000\083\000\083\000\083\000\083\000\083\000\000\000\
\000\000\083\000\083\000\083\000\083\000\086\000\086\000\086\000\
\000\000\000\000\000\000\000\000\086\000\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\087\000\087\000\
\087\000\000\000\000\000\000\000\000\000\087\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\087\000\000\000\
\000\000\000\000\000\000\000\000\000\000\086\000\086\000\086\000\
\086\000\086\000\086\000\086\000\086\000\086\000\000\000\000\000\
\086\000\086\000\086\000\086\000\000\000\000\000\087\000\087\000\
\087\000\087\000\087\000\087\000\087\000\087\000\087\000\000\000\
\000\000\087\000\087\000\087\000\087\000\088\000\088\000\088\000\
\000\000\000\000\000\000\000\000\088\000\088\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\089\000\089\000\
\089\000\000\000\000\000\000\000\000\000\089\000\089\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\089\000\000\000\
\000\000\000\000\000\000\000\000\000\000\088\000\088\000\088\000\
\088\000\088\000\088\000\088\000\088\000\088\000\000\000\000\000\
\088\000\088\000\088\000\088\000\000\000\000\000\089\000\089\000\
\089\000\089\000\089\000\089\000\089\000\089\000\089\000\000\000\
\000\000\089\000\089\000\089\000\089\000\081\000\081\000\081\000\
\000\000\000\000\000\000\000\000\081\000\081\000\000\000\080\000\
\080\000\080\000\000\000\000\000\000\000\081\000\080\000\080\000\
\000\000\000\000\079\000\079\000\079\000\000\000\000\000\080\000\
\000\000\079\000\079\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\081\000\081\000\000\000\
\000\000\081\000\081\000\081\000\000\000\000\000\000\000\080\000\
\080\000\000\000\000\000\080\000\080\000\080\000\000\000\000\000\
\000\000\000\000\079\000\000\000\000\000\000\000\079\000\079\000\
\077\000\077\000\077\000\000\000\000\000\000\000\000\000\077\000\
\077\000\000\000\078\000\078\000\078\000\000\000\000\000\000\000\
\077\000\078\000\078\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\078\000\113\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\077\000\077\000\000\000\000\000\
\000\000\000\000\078\000\000\000\161\000\000\000\078\000\078\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\000\000\000\000\081\000\082\000\083\000\
\084\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\166\000\000\000\081\000\082\000\
\083\000\084\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\205\000\000\000\000\000\
\000\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\074\000\075\000\076\000\
\077\000\078\000\079\000\080\000\000\000\000\000\081\000\082\000\
\083\000\084\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\000\000\000\000\081\000\
\082\000\083\000\084\000\063\000\000\000\000\000\063\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\095\000\000\000\000\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\000\000\063\000\063\000\063\000\063\000\063\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\095\000\095\000\095\000\095\000\095\000\
\095\000\095\000\095\000\158\000\000\000\095\000\095\000\095\000\
\095\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\062\000\063\000\064\000\065\000\066\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\074\000\075\000\
\076\000\077\000\078\000\079\000\080\000\165\000\000\000\081\000\
\082\000\083\000\084\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\077\000\078\000\079\000\080\000\191\000\000\000\
\081\000\082\000\083\000\084\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\075\000\076\000\077\000\078\000\079\000\080\000\000\000\
\000\000\081\000\082\000\083\000\084\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\077\000\078\000\079\000\080\000\
\000\000\000\000\081\000\082\000\083\000\084\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\000\000\073\000\074\000\075\000\000\000\000\000\078\000\079\000\
\080\000\000\000\000\000\081\000\082\000\083\000\084\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\069\000\070\000\
\071\000\000\000\000\000\074\000\075\000\000\000\000\000\000\000\
\079\000\080\000\000\000\000\000\081\000\082\000\083\000\084\000"

let yycheck = "\011\001\
\000\000\054\000\005\001\000\000\002\000\000\000\007\001\012\001\
\006\000\001\001\002\001\003\001\010\000\014\001\006\001\011\001\
\007\001\001\001\007\001\017\000\018\000\006\001\000\000\014\001\
\016\001\014\001\018\001\012\001\006\001\021\001\033\001\023\001\
\024\001\008\001\032\000\033\000\034\000\012\001\036\000\031\001\
\002\001\001\000\002\000\005\001\056\001\037\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\006\001\052\000\000\000\
\003\001\110\000\022\001\057\000\012\001\013\001\001\001\055\001\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\084\000\085\000\
\006\001\087\000\088\000\008\001\009\001\146\000\038\001\039\001\
\040\001\041\001\042\001\006\001\001\001\154\000\006\001\008\001\
\102\000\008\001\008\001\056\001\005\001\001\001\000\000\011\001\
\011\001\003\001\001\001\011\001\014\001\012\001\001\001\002\001\
\003\001\004\001\010\001\006\001\006\001\008\001\009\001\007\001\
\007\001\014\001\001\001\007\001\015\001\016\001\017\001\018\001\
\189\000\020\001\021\001\192\000\023\001\024\001\025\001\006\001\
\027\001\028\001\029\001\030\001\031\001\026\001\001\001\034\001\
\035\001\007\001\037\001\001\001\001\001\013\001\011\001\011\001\
\007\001\000\000\056\001\011\001\006\001\000\000\164\000\165\000\
\007\001\007\001\014\001\014\001\055\001\008\001\008\001\008\001\
\008\001\008\001\176\000\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\001\001\056\001\007\001\
\007\001\191\000\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\008\001\007\001\057\001\
\058\001\059\001\060\001\007\001\000\000\022\001\001\001\002\001\
\003\001\051\000\193\000\006\001\102\000\006\000\149\000\194\000\
\116\000\195\000\058\000\255\255\255\255\016\001\255\255\018\001\
\255\255\255\255\021\001\255\255\023\001\024\001\255\255\255\255\
\027\001\255\255\255\255\255\255\031\001\255\255\255\255\255\255\
\255\255\001\001\037\001\255\255\255\255\255\255\006\001\007\001\
\008\001\006\001\007\001\008\001\012\001\013\001\014\001\255\255\
\013\001\014\001\255\255\000\000\055\001\255\255\022\001\255\255\
\255\255\022\001\255\255\005\001\255\255\255\255\255\255\255\255\
\010\001\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\033\001\
\056\001\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\011\001\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\059\001\060\001\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\255\255\
\255\255\000\000\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\056\001\057\001\
\058\001\059\001\060\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\056\001\057\001\058\001\
\059\001\060\001\006\001\007\001\008\001\255\255\255\255\255\255\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\000\000\
\255\255\255\255\022\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\255\255\255\255\057\001\058\001\059\001\
\060\001\006\001\007\001\008\001\255\255\255\255\255\255\255\255\
\013\001\014\001\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\022\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\255\255\255\255\057\001\058\001\059\001\060\001\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\014\001\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\022\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\036\001\037\001\
\000\000\255\255\255\255\255\255\255\255\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\051\001\052\001\053\001\
\054\001\255\255\255\255\057\001\058\001\059\001\060\001\006\001\
\007\001\008\001\255\255\255\255\255\255\255\255\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\036\001\037\001\000\000\
\255\255\255\255\255\255\255\255\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\000\000\255\255\057\001\058\001\059\001\060\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\000\000\
\255\255\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\059\001\060\001\006\001\007\001\008\001\255\255\
\255\255\255\255\255\255\013\001\014\001\255\255\255\255\000\000\
\255\255\255\255\255\255\255\255\022\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\057\001\
\058\001\059\001\060\001\006\001\007\001\008\001\255\255\255\255\
\255\255\255\255\013\001\014\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\022\001\255\255\255\255\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\000\000\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\000\000\255\255\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\000\000\255\255\057\001\058\001\
\059\001\060\001\255\255\255\255\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\006\001\007\001\
\008\001\255\255\000\000\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\059\001\060\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\059\001\060\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\022\001\006\001\007\001\
\008\001\255\255\255\255\255\255\255\255\013\001\014\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\022\001\255\255\
\255\255\255\255\255\255\255\255\255\255\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\255\255\255\255\
\057\001\058\001\059\001\060\001\255\255\255\255\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\057\001\058\001\059\001\060\001\006\001\007\001\008\001\
\255\255\255\255\255\255\255\255\013\001\014\001\255\255\006\001\
\007\001\008\001\255\255\255\255\255\255\022\001\013\001\014\001\
\255\255\255\255\006\001\007\001\008\001\255\255\255\255\022\001\
\255\255\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\255\255\255\255\046\001\047\001\255\255\
\255\255\050\001\051\001\052\001\255\255\255\255\255\255\046\001\
\047\001\255\255\255\255\050\001\051\001\052\001\255\255\255\255\
\255\255\255\255\046\001\255\255\255\255\255\255\050\001\051\001\
\006\001\007\001\008\001\255\255\255\255\255\255\255\255\013\001\
\014\001\255\255\006\001\007\001\008\001\255\255\255\255\255\255\
\022\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\022\001\007\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\046\001\255\255\255\255\255\255\050\001\051\001\255\255\255\255\
\255\255\255\255\046\001\255\255\007\001\255\255\050\001\051\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\255\255\255\255\057\001\058\001\059\001\
\060\001\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\007\001\255\255\057\001\058\001\
\059\001\060\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\007\001\255\255\255\255\
\255\255\036\001\037\001\038\001\039\001\040\001\041\001\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\051\001\052\001\053\001\054\001\255\255\255\255\057\001\058\001\
\059\001\060\001\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\255\255\255\255\057\001\
\058\001\059\001\060\001\008\001\255\255\255\255\011\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\008\001\255\255\255\255\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\051\001\052\001\
\053\001\054\001\255\255\056\001\057\001\058\001\059\001\060\001\
\036\001\037\001\038\001\039\001\040\001\041\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\051\001\
\052\001\053\001\054\001\013\001\255\255\057\001\058\001\059\001\
\060\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\036\001\037\001\038\001\039\001\040\001\041\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\051\001\052\001\053\001\054\001\014\001\255\255\057\001\
\058\001\059\001\060\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\014\001\255\255\
\057\001\058\001\059\001\060\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\255\255\
\255\255\057\001\058\001\059\001\060\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\255\255\255\255\057\001\058\001\059\001\060\001\036\001\037\001\
\038\001\039\001\040\001\041\001\042\001\043\001\044\001\045\001\
\255\255\047\001\048\001\049\001\255\255\255\255\052\001\053\001\
\054\001\255\255\255\255\057\001\058\001\059\001\060\001\036\001\
\037\001\038\001\039\001\040\001\041\001\042\001\043\001\044\001\
\045\001\255\255\255\255\048\001\049\001\255\255\255\255\255\255\
\053\001\054\001\255\255\255\255\057\001\058\001\059\001\060\001"

let yynames_const = "\
  LPAREN\000\
  RPAREN\000\
  SEMI\000\
  EOF\000\
  LCURLY\000\
  RCURLY\000\
  COLON\000\
  LSQUARE\000\
  RSQUARE\000\
  COMMA\000\
  CJMP\000\
  NAME\000\
  JMP\000\
  CAST\000\
  INIT\000\
  VAR\000\
  LET\000\
  IN\000\
  TRUE\000\
  FALSE\000\
  LABEL\000\
  ATTR\000\
  CALL\000\
  ASSERT\000\
  HALT\000\
  SPECIAL\000\
  UNKNOWN\000\
  STATE\000\
  TVOID\000\
  RETURN\000\
  EXTERN\000\
  PLUS\000\
  MINUS\000\
  DIVIDE\000\
  MOD\000\
  SMOD\000\
  TIMES\000\
  SDIVIDE\000\
  LSHIFT\000\
  RSHIFT\000\
  ARSHIFT\000\
  XOR\000\
  NEQ\000\
  SLT\000\
  SLE\000\
  AND\000\
  OR\000\
  EQUAL\000\
  LT\000\
  LE\000\
  NOT\000\
  ASSIGN\000\
  GT\000\
  GE\000\
  SGT\000\
  SGE\000\
  "

let yynames_block = "\
  ID\000\
  INT\000\
  STRING\000\
  COMMENT\000\
  TYP\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Vine.stmt list) in
    Obj.repr(
# 75 "vine_grammar.mly"
               ( 
    let dl = scope#decls () in
    (* let () = scope#dec () in  *)
      (List.rev dl, _1)
  )
# 797 "vine_grammar.ml"
               : Vine.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revstmtlist) in
    Obj.repr(
# 82 "vine_grammar.mly"
               ( List.rev _1 )
# 804 "vine_grammar.ml"
               : Vine.stmt list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'revstmtlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 93 "vine_grammar.mly"
                    (  match _2 with
			 | [x] -> x::_1
			 | [] -> _1
			 | _ -> failwith "stmt returned more than one stmt"
		    )
# 816 "vine_grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 98 "vine_grammar.mly"
                 ( [] )
# 822 "vine_grammar.ml"
               : 'revstmtlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'jmpstmt) in
    Obj.repr(
# 101 "vine_grammar.mly"
                      ( [_1] )
# 829 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'specialstmt) in
    Obj.repr(
# 102 "vine_grammar.mly"
                      ( [_1] )
# 836 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'labelstmt) in
    Obj.repr(
# 103 "vine_grammar.mly"
                      ( [_1] )
# 843 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 104 "vine_grammar.mly"
                      ( [Comment(_1)] )
# 850 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'simplestmt) in
    Obj.repr(
# 105 "vine_grammar.mly"
                      ( [_1] )
# 857 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'func) in
    Obj.repr(
# 106 "vine_grammar.mly"
                      ( [_1] )
# 864 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'vardecls) in
    Obj.repr(
# 107 "vine_grammar.mly"
                      ( [] )
# 871 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmtblock) in
    Obj.repr(
# 108 "vine_grammar.mly"
                      ( [_1] )
# 878 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 109 "vine_grammar.mly"
                      ( [] )
# 884 "vine_grammar.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Vine.exp ) in
    Obj.repr(
# 114 "vine_grammar.mly"
    ( Jmp(_3) )
# 891 "vine_grammar.ml"
               : 'jmpstmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Vine.exp ) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Vine.exp ) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Vine.exp ) in
    Obj.repr(
# 116 "vine_grammar.mly"
         ( CJmp(_3, _5, _7)  )
# 900 "vine_grammar.ml"
               : 'jmpstmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 121 "vine_grammar.mly"
    ( Special(_3))
# 907 "vine_grammar.ml"
               : 'specialstmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 124 "vine_grammar.mly"
                  ( Label(_2) )
# 914 "vine_grammar.ml"
               : 'labelstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'assignment) in
    Obj.repr(
# 127 "vine_grammar.mly"
                   ( _1 )
# 921 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 128 "vine_grammar.mly"
                   ( ExpStmt(_1) )
# 928 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'optexpr) in
    Obj.repr(
# 129 "vine_grammar.mly"
                   ( Return(_2) )
# 935 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 130 "vine_grammar.mly"
                   ( Halt(_2) )
# 942 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 131 "vine_grammar.mly"
                   ( Assert(_2) )
# 949 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'callstmt) in
    Obj.repr(
# 132 "vine_grammar.mly"
                   ( _1 )
# 956 "vine_grammar.ml"
               : 'simplestmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 135 "vine_grammar.mly"
                   ( Move(_1, _3) )
# 964 "vine_grammar.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lval) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'callstmt) in
    Obj.repr(
# 136 "vine_grammar.mly"
                       (
    match _3 with
	Call(None, a, b) -> Call(Some(_1), a, b)
      | _ -> err (line_ctxt 1 3) "Bad call statement"
  )
# 976 "vine_grammar.ml"
               : 'assignment))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : Vine.exp ) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 145 "vine_grammar.mly"
      ( Call(None, _2, _4) )
# 984 "vine_grammar.ml"
               : 'callstmt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 147 "vine_grammar.mly"
  ( (* old syntax *) Call(None, Vine.Name(_1), _3) )
# 992 "vine_grammar.ml"
               : 'callstmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 150 "vine_grammar.mly"
       ( None )
# 998 "vine_grammar.ml"
               : 'optexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 151 "vine_grammar.mly"
       ( Some(_1) )
# 1005 "vine_grammar.ml"
               : 'optexpr))
; (fun __caml_parser_env ->
    Obj.repr(
# 154 "vine_grammar.mly"
   ( [] )
# 1011 "vine_grammar.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 155 "vine_grammar.mly"
       ( _1 )
# 1018 "vine_grammar.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 158 "vine_grammar.mly"
         ( [_1] )
# 1025 "vine_grammar.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'args) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 159 "vine_grammar.mly"
                   ( _3 :: _1 )
# 1033 "vine_grammar.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'optextern) in
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'funtyp) in
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'formals) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'optbody) in
    Obj.repr(
# 164 "vine_grammar.mly"
    ( 
      (
	match _7 with
	    Some _ -> if _1 then 
	      err (line_ctxt 1 3) 
		"Function declared external but defined here"
	  | _ -> () 
      );
      scope#dec (); (* this decrements the formals scope *)
      Function(_3, _2, List.rev _5, _1, _7)
    )
# 1054 "vine_grammar.ml"
               : 'func))
; (fun __caml_parser_env ->
    Obj.repr(
# 177 "vine_grammar.mly"
        ( (* we increment the scope here so that the
	     formals are in a new scope *) 
    scope#inc (); None )
# 1062 "vine_grammar.ml"
               : 'funtyp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 180 "vine_grammar.mly"
      ( scope#inc (); Some(_1))
# 1069 "vine_grammar.ml"
               : 'funtyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 183 "vine_grammar.mly"
          ( false )
# 1075 "vine_grammar.ml"
               : 'optextern))
; (fun __caml_parser_env ->
    Obj.repr(
# 184 "vine_grammar.mly"
          ( true )
# 1081 "vine_grammar.ml"
               : 'optextern))
; (fun __caml_parser_env ->
    Obj.repr(
# 187 "vine_grammar.mly"
            ( None )
# 1087 "vine_grammar.ml"
               : 'optbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'stmtblock) in
    Obj.repr(
# 188 "vine_grammar.mly"
            ( Some(_1) )
# 1094 "vine_grammar.ml"
               : 'optbody))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formallist) in
    Obj.repr(
# 191 "vine_grammar.mly"
             ( _1 )
# 1101 "vine_grammar.ml"
               : 'formals))
; (fun __caml_parser_env ->
    Obj.repr(
# 192 "vine_grammar.mly"
  ( [] )
# 1107 "vine_grammar.ml"
               : 'formals))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formallist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 195 "vine_grammar.mly"
                          ( _3 :: _1 )
# 1115 "vine_grammar.ml"
               : 'formallist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal) in
    Obj.repr(
# 196 "vine_grammar.mly"
         ( [_1] )
# 1122 "vine_grammar.ml"
               : 'formallist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 199 "vine_grammar.mly"
               ( scope#add _1 _3 )
# 1130 "vine_grammar.ml"
               : 'formal))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'idents) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 204 "vine_grammar.mly"
  ( 
    List.iter (fun n -> ignore(scope#add n _4)) (List.rev _2)
  )
# 1140 "vine_grammar.ml"
               : 'vardecls))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'revidents) in
    Obj.repr(
# 209 "vine_grammar.mly"
             ( List.rev _1 )
# 1147 "vine_grammar.ml"
               : 'idents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 212 "vine_grammar.mly"
                  ( [_1] )
# 1154 "vine_grammar.ml"
               : 'revidents))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'revidents) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 213 "vine_grammar.mly"
                     ( _3 :: _1 )
# 1162 "vine_grammar.ml"
               : 'revidents))
; (fun __caml_parser_env ->
    Obj.repr(
# 216 "vine_grammar.mly"
       ( ignore(scope#inc ()) )
# 1168 "vine_grammar.ml"
               : 'lcurlyrule))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'lcurlyrule) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Vine.stmt list) in
    Obj.repr(
# 219 "vine_grammar.mly"
                             ( 
    let dl = scope#decls () in 
    let () = scope#dec () in 
      Block(dl, _2)
  )
# 1180 "vine_grammar.ml"
               : 'stmtblock))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'basetyp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'attrs) in
    Obj.repr(
# 228 "vine_grammar.mly"
                 ( match _2 with 
		       [] -> _1
		     | _ -> TAttr(_1, _2) 
		 )
# 1191 "vine_grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'typ) in
    Obj.repr(
# 232 "vine_grammar.mly"
                           ( Array(_1, array_idx_type_to_size _3) )
# 1199 "vine_grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Int64.t) in
    Obj.repr(
# 233 "vine_grammar.mly"
                          ( Array(_1, _3)  )
# 1207 "vine_grammar.ml"
               : 'typ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Vine.typ) in
    Obj.repr(
# 236 "vine_grammar.mly"
      ( _1)
# 1214 "vine_grammar.ml"
               : 'basetyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 240 "vine_grammar.mly"
     ( [] )
# 1220 "vine_grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'idlist) in
    Obj.repr(
# 241 "vine_grammar.mly"
                            ( _3  )
# 1227 "vine_grammar.ml"
               : 'attrs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 245 "vine_grammar.mly"
     ( [_1] )
# 1234 "vine_grammar.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 246 "vine_grammar.mly"
                  ( _1 :: _3 )
# 1242 "vine_grammar.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'optindex) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'opttyp) in
    Obj.repr(
# 249 "vine_grammar.mly"
                     ( 
    check_lval scope _1 _2 _3 (line_ctxt 1 1)
  )
# 1253 "vine_grammar.ml"
               : 'lval))
; (fun __caml_parser_env ->
    Obj.repr(
# 254 "vine_grammar.mly"
  ( None )
# 1259 "vine_grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 255 "vine_grammar.mly"
            ( Some(_2) )
# 1266 "vine_grammar.ml"
               : 'opttyp))
; (fun __caml_parser_env ->
    Obj.repr(
# 258 "vine_grammar.mly"
   ( None )
# 1272 "vine_grammar.ml"
               : 'optindex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Vine.exp ) in
    Obj.repr(
# 259 "vine_grammar.mly"
                        ( Some(_2)  )
# 1279 "vine_grammar.ml"
               : 'optindex))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'optindex) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'opttyp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 262 "vine_grammar.mly"
                                     ( 
    scope#inc(); 
    match _3,_4 with
	None,None ->
	  Vine_absyn.err (line_ctxt 1 3) 
	    "Let variable declared without type"
      | None,Some(t) -> (Temp(scope#add _2 t), _6)
      | Some(idx), None -> (
	  let v= scope#lookup _2 in 
	    match v with
		(_,_,Array(t1,_)) -> (Mem(v,idx,t1), _6)
	      | _ -> Vine_absyn.err (line_ctxt 1 3)
		  "Memory reference required type annotation"
	)
      | Some(idx), Some(t) ->
	  (Mem(scope#lookup _2, idx, t),_6)
  )
# 1305 "vine_grammar.ml"
               : 'letstart))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Vine.exp ) in
    Obj.repr(
# 281 "vine_grammar.mly"
                     ( _2 )
# 1312 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 282 "vine_grammar.mly"
                     ( BinOp(PLUS, _1, _3) )
# 1320 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 283 "vine_grammar.mly"
                     ( BinOp(Vine.MINUS, _1, _3))
# 1328 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 284 "vine_grammar.mly"
                     ( BinOp(Vine.TIMES, _1, _3) )
# 1336 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 285 "vine_grammar.mly"
                     ( BinOp(Vine.DIVIDE, _1, _3) )
# 1344 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 286 "vine_grammar.mly"
                     ( BinOp(Vine.SDIVIDE, _1, _3) )
# 1352 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 287 "vine_grammar.mly"
                     ( BinOp(Vine.MOD, _1, _3) )
# 1360 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 288 "vine_grammar.mly"
                     ( BinOp(Vine.SMOD, _1, _3) )
# 1368 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 289 "vine_grammar.mly"
                     ( BinOp(Vine.LSHIFT, _1, _3) )
# 1376 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 290 "vine_grammar.mly"
                     ( BinOp(Vine.RSHIFT, _1, _3) )
# 1384 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 291 "vine_grammar.mly"
                     ( BinOp(Vine.ARSHIFT, _1, _3) )
# 1392 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 292 "vine_grammar.mly"
                     ( BinOp(Vine.BITAND, _1, _3) )
# 1400 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 293 "vine_grammar.mly"
                     ( BinOp(Vine.BITOR, _1, _3) )
# 1408 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 294 "vine_grammar.mly"
                     ( BinOp(Vine.XOR,  _1, _3) )
# 1416 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 295 "vine_grammar.mly"
                     ( BinOp(Vine.EQ, _1, _3) )
# 1424 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 296 "vine_grammar.mly"
                     ( BinOp(Vine.NEQ, _1, _3) )
# 1432 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 297 "vine_grammar.mly"
                     ( BinOp(Vine.LT, _1, _3) )
# 1440 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 298 "vine_grammar.mly"
                     ( BinOp(Vine.LE,  _1, _3) )
# 1448 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 299 "vine_grammar.mly"
                     ( BinOp(Vine.SLT, _1, _3) )
# 1456 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 300 "vine_grammar.mly"
                     ( BinOp(Vine.SLE, _1, _3) )
# 1464 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 302 "vine_grammar.mly"
                     ( BinOp(Vine.LT,  _3, _1) )
# 1472 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 303 "vine_grammar.mly"
                     ( BinOp(Vine.LE,  _3, _1) )
# 1480 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 304 "vine_grammar.mly"
                     ( BinOp(Vine.SLT, _3, _1) )
# 1488 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Vine.exp ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 305 "vine_grammar.mly"
                     ( BinOp(Vine.SLE, _3, _1) )
# 1496 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 306 "vine_grammar.mly"
                     ( UnOp(Vine.NOT, _2) )
# 1503 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 307 "vine_grammar.mly"
                           ( UnOp(Vine.NEG, _2) )
# 1510 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constexp) in
    Obj.repr(
# 308 "vine_grammar.mly"
                     ( _1 )
# 1517 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 309 "vine_grammar.mly"
                     ( Unknown(_2) )
# 1524 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 310 "vine_grammar.mly"
                        ( Name(_3) )
# 1531 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'lval) in
    Obj.repr(
# 311 "vine_grammar.mly"
                     ( Lval(_1) )
# 1538 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'letstart) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Vine.exp ) in
    Obj.repr(
# 312 "vine_grammar.mly"
                     ( scope#dec (); 
		       let (x,y) = _1 in 
		       Let(x,y, _3) )
# 1548 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : Vine.exp ) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 316 "vine_grammar.mly"
    ( Cast(casttype_of_string _5, _7, _3) )
# 1557 "vine_grammar.ml"
               : Vine.exp ))
; (fun __caml_parser_env ->
    Obj.repr(
# 319 "vine_grammar.mly"
                     ( Vine.exp_true )
# 1563 "vine_grammar.ml"
               : 'constexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 320 "vine_grammar.mly"
                     ( Vine.exp_false )
# 1569 "vine_grammar.ml"
               : 'constexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Int64.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'typ) in
    Obj.repr(
# 321 "vine_grammar.mly"
                     ( Constant(Int(_3, _1)) )
# 1577 "vine_grammar.ml"
               : 'constexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 322 "vine_grammar.mly"
                     ( Constant(Str(_1)) )
# 1584 "vine_grammar.ml"
               : 'constexp))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Vine.program)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Vine.exp )
;;
# 326 "vine_grammar.mly"

# 1615 "vine_grammar.ml"
